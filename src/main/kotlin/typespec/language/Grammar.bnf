{
    parserClass="typespec._TsParser"
    psiClassPrefix="Ts"
    psiImplClassSuffix="Impl"
    psiPackage="typespec.psi.interfaces"
    psiImplPackage="typespec.psi.impl"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    elementTypeHolderClass="typespec.TsTypes"
    elementTypeClass="typespec.language.TsElementType"
    tokenTypeClass="typespec.language.TsTokenType"

    implements("AliasStatement|ModelStatement|ScalarStatement|EnumStatement")="typespec.psi.TsNamedElement"
    mixin("AliasStatement|ModelStatement|ScalarStatement|EnumStatement")="typespec.psi.TsNamedElementImpl"

    tokens=[
        WHITE_SPACE='regexp:[ \n\r\t\f]+'
        COMMENT='regexp:"//"[^\n]*'
        MULTILINE_COMMENT="regexp:/\*\*([^*]|\*+[^*/])*\*+/"

        PIPE='|'
        QUESTION='?'
        EQUALS='='
        AMPERSAND='&'
        COLON=':'
        COMMA=','
        SEMICOLON=';'
        DOT='.'
        MINUS='-'
        LT='<'
        GT='>'
        LPAREN='('
        RPAREN=')'
        LBRACE='{'
        RBRACE='}'
        LBRACK='['
        RBRACK=']'
        DOUBLE_AT='@@'
        AT='@'
        ELLIPSIS='...'
        HASH='#'

        IMPORT="import"
        USING="using"
        NAMESPACE="namespace"
        SCALAR="scalar"
        MODEL="model"
        EXTENDS="extends"
        IS="is"
        INTERFACE="interface"
        INIT="init"
        OP="op"
        ENUM="enum"
        TYPEOF="typeof"
        EXTERN="extern"
        DEC="dec"
        FN="fn"
        ALIAS="alias"
        UNION="union"
        SUPPRESS="suppress"
        DEPRECATED="deprecated"

        STRING_LITERAL1="regexp:'.*'"
        STRING_LITERAL2="regexp:`.*`"
        STRING_LITERAL3='regexp:\".*\"'
        STRING_LITERAL4="regexp:'''([^']|'{0,2}[^'])*'''"
        STRING_LITERAL5="regexp:\"\"\"([^\"]|\"{0,2}[^\"])*\"\"\""
        INT_LITERAL='regexp:\d+'
        FLOAT_LITERAL='regexp:\d+\.\d+'
        IDENTIFIER="regexp:[a-zA-Z_$]+\w*"
    ]
}

private typeSpecFile ::= TypeSpecScript

private TypeSpecScript ::=
        TypeSpecScriptItem*

private TypeSpecScriptItem ::=
        BlocklessNamespaceStatement
    |   ImportStatement
    |   Statement

private Directive ::=
        SuppressStatement
    |   DeprecatedStatement

private SuppressStatement ::=
        HASH SUPPRESS StringLiteral StringLiteral?

private DeprecatedStatement ::=
        HASH DEPRECATED StringLiteral StringLiteral?

BlocklessNamespaceStatement ::=
        DecoratorList? NAMESPACE IdentifierOrMemberExpression SEMICOLON

private ImportStatement ::=
        IMPORT StringLiteral SEMICOLON

StatementList ::=
        Statement*

Statement ::=
        ModelStatement
    |   ScalarStatement
    |   InterfaceStatement
    |   NamespaceStatement
    |   OperationStatement
    |   UsingStatement
    |   EnumStatement
    |   AliasStatement
    |   AugmentDecoratorStatement
    |   DecoratorDeclarationStatement
    |   FunctionDeclarationStatement
    |   UnionStatement
    |   Directive
    |   SEMICOLON

private UsingStatement ::=
        USING IdentifierOrMemberExpression SEMICOLON

ModelStatement ::=
        DecoratorList? MODEL IdentifierVariable TemplateParameters? ModelStatementSuffix

private ModelStatementSuffix ::=
        ModelHeritage? LBRACE ModelBody? RBRACE
    |   IsModelHeritage SEMICOLON

private IsModelHeritage ::=
        IS Expression

ScalarStatement ::=
        DecoratorList? SCALAR IdentifierVariable TemplateParameters? ScalarExtends? SEMICOLON
    |   DecoratorList? SCALAR IdentifierVariable TemplateParameters? ScalarExtends? LBRACE ScalarBody? RBRACE

private ScalarExtends ::=
        EXTENDS Expression

private ScalarBody ::=
        ScalarMemberList SEMICOLON?

private ScalarMemberList ::=
        ScalarMember (SEMICOLON ScalarMember)*

private ScalarMember::=
        INIT IdentifierVariable LPAREN FunctionParameterList? RPAREN

private ExtendsModelHeritage ::=
        EXTENDS Expression

private ModelHeritage ::=
        IsModelHeritage
    |   ExtendsModelHeritage
    
ModelBody ::=
        ModelPropertyList (COMMA|SEMICOLON)?

private ModelPropertyList ::=
        ModelProperty*

private ModelProperty ::=
        ModelSpreadProperty (COMMA|SEMICOLON)?
    |   DecoratorList? (IdentifierVariable|StringLiteral) QUESTION? COLON Expression (EQUALS Expression)? (COMMA|SEMICOLON)?

private ModelSpreadProperty ::=
        ELLIPSIS ReferenceExpression

InterfaceStatement ::=
        DecoratorList? INTERFACE IdentifierVariable TemplateParameters? InterfaceHeritage? LBRACE InterfaceBody? RBRACE

private InterfaceHeritage ::=
        EXTENDS ReferenceExpressionList

private InterfaceBody ::=
        InterfaceMemberList SEMICOLON?

private InterfaceMemberList ::=
        InterfaceMember (SEMICOLON InterfaceMember)*

private InterfaceMember ::=
        DecoratorList? OP? IdentifierVariable OperationSignature

private UnionStatement ::=
        DecoratorList? UNION IdentifierVariable TemplateParameters? LBRACE UnionBody? RBRACE

private UnionBody ::=
        UnionVariantList (SEMICOLON|COMMA)?

private UnionVariantList ::=
        UnionVariant ((SEMICOLON|COMMA)? UnionVariant)*

private UnionVariant ::=
        DecoratorList? IdentifierVariable COLON Expression
    |   DecoratorList? StringLiteral COLON Expression
    |   DecoratorList? Expression

EnumStatement ::=
        DecoratorList? ENUM IdentifierVariable LBRACE EnumBody? RBRACE

private EnumBody ::=
        EnumMemberList (COMMA|SEMICOLON)?

private EnumMemberList ::=
        EnumMember ((COMMA|SEMICOLON) EnumMember)*

private EnumMember ::=
        EnumSpreadMember
    |   DecoratorList? IdentifierVariable EnumMemberValue?
    |   DecoratorList? StringLiteral EnumMemberValue?

private EnumSpreadMember ::=
        ELLIPSIS ReferenceExpression

private EnumMemberValue ::=
        COLON StringLiteral
    |   COLON NumericLiteral

AliasStatement ::=
        ALIAS IdentifierVariable TemplateParameters? EQUALS Expression;

TemplateParameters ::=
        LT TemplateParameterList GT

private TemplateParameterList ::=
        TemplateParameter (COMMA TemplateParameter)*

private TemplateParameter ::=
        IdentifierVariable TemplateParameterConstraint? TemplateParameterDefault?

private TemplateParameterConstraint ::=
        EXTENDS MixedParameterConstraint

private MixedParameterConstraint ::=
        UnionExpressionOrHigher
    |   valueof UnionExpressionOrHigher

  
private TemplateParameterDefault ::=
        EQUALS Expression

NamespaceStatement ::=
        DecoratorList? NAMESPACE IdentifierOrMemberExpression LBRACE StatementList? RBRACE

private OperationSignatureDeclaration ::=
        LPAREN (ModelPropertyList (COMMA|SEMICOLON)?)?  RPAREN COLON Expression

private OperationSignatureReference ::=
        IS ReferenceExpression

private OperationSignature ::=
        OperationSignatureDeclaration
    |   OperationSignatureReference

OperationStatement ::=
        DecoratorList? OP IdentifierVariable TemplateParameters? OperationSignature SEMICOLON

Expression ::=
        UnionExpressionOrHigher

UnionExpressionOrHigher ::=
        PIPE? IntersectionExpressionOrHigher (PIPE IntersectionExpressionOrHigher)*
    {   extends=Expression  }

IntersectionExpressionOrHigher ::=
        AMPERSAND? ArrayExpressionOrHigher (AMPERSAND ArrayExpressionOrHigher)*

private TypeOfExpression ::=
        TYPEOF Literal
    |   TYPEOF ReferenceExpression
    |   TYPEOF ParenthesizedExpression

private ArrayExpressionOrHigher ::=
        PrimaryExpression (LBRACK RBRACK)*

PrimaryExpression ::=
        TypeOfExpression
    |   Literal
    |   CallOrReferenceExpression
    |   ParenthesizedExpression
    |   ObjectLiteral
    |   ArrayLiteral
    |   ModelExpression
    |   TupleExpression

private Literal ::=
        StringLiteral
    |   BooleanLiteral
    |   NumericLiteral

private CallOrReferenceExpression ::=
        CallExpression
    |   ReferenceExpression

private ReferenceExpression ::=
        IdentifierOrMemberExpression TemplateArguments?

private ReferenceExpressionList ::=
        ReferenceExpression (COMMA ReferenceExpression)*

private IdentifierOrMemberExpression ::=
        IdentifierVariable (DOT IdentifierVariable)*

private TemplateArguments ::=
        LT ExpressionList GT

private ParenthesizedExpression ::=
        LPAREN Expression RPAREN
    |   LPAREN MixedParameterConstraint RPAREN

private ObjectLiteral ::=
        '#{' ObjectLiteralBody? RBRACE

private ObjectLiteralBody ::=
        ModelPropertyList COMMA?

private ArrayLiteral ::=
        '#[' ExpressionList? RBRACK

private ModelExpression ::=
        LBRACE ModelBody? RBRACE

private TupleExpression ::=
        LBRACK ExpressionList? RBRACK

private ExpressionList ::=
        Expression (COMMA Expression)*

DecoratorList ::=
        Decorator+

Decorator ::=
        AT IdentifierOrMemberExpression DecoratorArguments?
    |   Directive

private DecoratorArguments ::=
        LPAREN ExpressionList? RPAREN

private CallExpression ::=
        IdentifierOrMemberExpression LPAREN ExpressionList? RPAREN

private AugmentDecoratorStatement ::=
        DOUBLE_AT IdentifierOrMemberExpression DecoratorArguments?


private DecoratorDeclarationStatement ::=
        DecoratorModifiers? DEC LPAREN FunctionParameterList? RPAREN

private DecoratorModifiers::=
        EXTERN

private FunctionDeclarationStatement ::=
        FunctionModifiers? FN LPAREN FunctionParameterList? RPAREN TypeAnnotation?

private TypeAnnotation ::=
        COLON MixedParameterConstraint

private FunctionModifiers ::=
        EXTERN

private FunctionParameterList ::=
        FunctionParameter (COMMA FunctionParameter)*

private FunctionParameter ::=
        ELLIPSIS? IdentifierVariable QUESTION? TypeAnnotation?

IdentifierVariable ::=
        IDENTIFIER
    {   mixin="typespec.psi.TsVariable" }

private StringLiteral ::=
        STRING_LITERAL1
    |   STRING_LITERAL2
    |   STRING_LITERAL3
    |   STRING_LITERAL4
    |   STRING_LITERAL5

private NumericLiteral ::=
        MINUS? INT_LITERAL
    |   MINUS? FLOAT_LITERAL

private BooleanLiteral ::=
        BOOL_LITERAL